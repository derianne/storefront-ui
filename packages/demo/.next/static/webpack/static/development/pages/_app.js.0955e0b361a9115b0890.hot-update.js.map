{"version":3,"file":"static/webpack/static/development/pages/_app.js.0955e0b361a9115b0890.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React from \"react\";\nimport App from \"next/app\";\n\nimport { GridDebugger } from \"@commerce-ui/core/Grid\";\n\nimport { theme } from \"../theme\";\nimport Root from \"@commerce-ui/core/Root\";\n\nimport MainTabBar from \"../components/MainTabBar\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { ApolloProvider as ApolloHooksProvider } from \"@apollo/react-hooks\";\nimport withApolloClient from \"../lib/with-apollo-client\";\n\n/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport MenuDesktop, { MenuDesktopContent } from \"../components/MenuDesktop\";\n\nimport Device from \"@commerce-ui/core/Device\";\nimport Footer from \"../components/Footer\";\nimport data from \"../data\";\nimport { parseCookies, setCookie } from \"../helpers/cookie\";\nimport fetchCheckout from \"../actions/fetchCheckout\";\nimport createEmptyCheckout from \"../actions/createEmptyCheckout\";\nimport { InjectCheckoutContext } from \"../lib/CheckoutContext\";\n\nimport routerPush from \"../helpers/routerPush\";\n\nconst tabs = [\n  {\n    label: \"Home\",\n    icon: \"home\"\n  },\n  {\n    label: \"Menu\",\n    icon: \"menu\"\n  },\n  {\n    label: \"Favs\",\n    icon: \"favs\"\n  },\n  {\n    label: \"Basket\",\n    icon: \"basket\"\n  },\n  {\n    label: \"Profile\",\n    icon: \"profile\"\n  }\n];\n\nconst menuData = [\n  {\n    label: \"Home\",\n    href: \"/category\",\n    content: <MenuDesktopContent category={data.categories[0]} index={0} />\n  },\n  {\n    label: \"Beauty\",\n    href: \"/category\",\n    content: <MenuDesktopContent category={data.categories[1]} index={1} />\n  },\n  {\n    label: \"Food\",\n    href: \"/category\",\n    content: <MenuDesktopContent category={data.categories[2]} index={2} />\n  },\n  {\n    label: \"Health\",\n    href: \"/category\",\n    content: <MenuDesktopContent category={data.categories[3]} index={3} />\n  }\n];\n\nclass MyApp extends App {\n  state = {};\n\n  static async getInitialProps({ Component, ctx }, apollo) {\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    const checkout = await MyApp.createCheckout(apollo, ctx);\n\n    return { pageProps, noRoot: ctx.query.noRoot !== undefined, checkout };\n  }\n\n  static async createCheckout(client, ctx) {\n    if (client.cache.data.data.Checkout) {\n      return client.cache.data.data.Checkout;\n    }\n\n    if (!client.cache.data.data.Checkout && parseCookies(ctx).checkoutId) {\n      const { data } = await fetchCheckout(\n        client,\n        parseCookies(ctx).checkoutId\n      );\n      return data.node;\n    }\n\n    const { data } = await createEmptyCheckout(client);\n    setCookie(ctx, \"checkoutId\", data.checkoutCreate.checkout.id);\n    return data.checkoutCreate.checkout;\n  }\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { Component, pageProps, apolloClient } = this.props;\n\n    const content = <Component {...pageProps} />;\n\n    const showTabbar = Component.tabbar !== undefined && !this.props.noRoot;\n    const hideDesktopMenu = Component.hideDesktopMenu === true;\n    const desktopMenuTransparentAtTop =\n      Component.desktopMenuTransparentAtTop === true;\n    const showFooterOnMobile = Component.showFooterOnMobile === true;\n\n    return (\n      <InjectCheckoutContext checkout={this.props.checkout}>\n        <ApolloProvider client={apolloClient}>\n          <ApolloHooksProvider client={apolloClient}>\n            <Root theme={theme}>\n              <GridDebugger />\n\n              <Device mobile>\n                {showTabbar && (\n                  <div>\n                    <div\n                      css={css`\n                        margin-bottom: 50px;\n                      `}\n                    >\n                      {content}\n                      {showFooterOnMobile && <Footer />}\n                    </div>\n\n                    <div\n                      css={css`\n                        position: fixed;\n                        bottom: 0;\n                        left: 0;\n                        width: 100%;\n                      `}\n                    >\n                      <MainTabBar\n                        data={tabs}\n                        active={Component.tabbar}\n                        onChange={index => {\n                          if (index === 0) {\n                            routerPush(\"/\");\n                          } else if (index === 1) {\n                            routerPush(\"/menu\");\n                          } else if (index === 2) {\n                            routerPush(\"/wishlist\");\n                          } else if (index === 3) {\n                            routerPush(\"/cart\");\n                          } else if (index === 4) {\n                            routerPush(\"/profile\");\n                          }\n                        }}\n                        scrollable={false}\n                        align={\"fit\"}\n                      />\n                    </div>\n                  </div>\n                )}\n\n                {!showTabbar && (\n                  <>\n                    {content}\n                    {showFooterOnMobile && <Footer />}\n                  </>\n                )}\n              </Device>\n\n              <Device desktop>\n                {hideDesktopMenu && content}\n\n                {!hideDesktopMenu && (\n                  <>\n                    <MenuDesktop data={menuData} mode={\"fixed\"} />\n\n                    <div\n                      css={css`\n                        padding-top: 70px;\n                      `}\n                    >\n                      {content}\n\n                      <Footer />\n                    </div>\n                  </>\n                )}\n              </Device>\n            </Root>\n          </ApolloHooksProvider>\n        </ApolloProvider>\n      </InjectCheckoutContext>\n    );\n  }\n}\n\nexport default withApolloClient(MyApp);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAMA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AACA;AAMA;;;;;;;;;;AAGA;;;;;;AAAA;AACA;AACA;AACA;;;;;;AACA;AACA;;AADA;AACA;;;AAEA;AACA;;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;;;;;AACA;AACA;;AAEA;;;;;;AACA;AACA;;;AADA;AAIA;AACA;;;AAEA;AACA;;;AADA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AADA;AAEA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;AAlIA;AACA;AAoIA;;;;A","sourceRoot":""}