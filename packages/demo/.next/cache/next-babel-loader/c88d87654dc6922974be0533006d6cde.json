{"ast":null,"code":"import { ApolloClient, InMemoryCache, HttpLink } from \"apollo-boost\";\nimport fetch from \"isomorphic-unfetch\";\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (!process.browser) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: \"https://biggest-ecommerce.myshopify.com/api/graphql\",\n      // Server URL (must be absolute)\n      headers: {\n        \"X-Shopify-Storefront-Access-Token\": \"7a415603317462ae8c7e4f98be2c5b5e\"\n      }\n    }),\n    cache: new InMemoryCache().restore(initialState || {}),\n    clientState: {\n      defaults: {},\n      resolvers: {}\n    }\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/Users/andrzej/Projects/storefront-ui/demo/lib/init-apollo.js"],"names":["ApolloClient","InMemoryCache","HttpLink","fetch","apolloClient","process","browser","global","create","initialState","connectToDevTools","ssrMode","link","uri","headers","cache","restore","clientState","defaults","resolvers","initApollo"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,QAAsD,cAAtD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAIC,YAAY,GAAG,IAAnB,C,CAEA;;AACA,IAAI,CAACC,OAAO,CAACC,OAAb,EAAsB;AACpBC,EAAAA,MAAM,CAACJ,KAAP,GAAeA,KAAf;AACD;;AAED,SAASK,MAAT,CAAgBC,YAAhB,EAA8B;AAC5B;AACA,SAAO,IAAIT,YAAJ,CAAiB;AACtBU,IAAAA,iBAAiB,EAAEL,OAAO,CAACC,OADL;AAEtBK,IAAAA,OAAO,EAAE,CAACN,OAAO,CAACC,OAFI;AAEK;AAC3BM,IAAAA,IAAI,EAAE,IAAIV,QAAJ,CAAa;AACjBW,MAAAA,GAAG,EAAE,qDADY;AAC2C;AAC5DC,MAAAA,OAAO,EAAE;AACP,6CAAqC;AAD9B;AAFQ,KAAb,CAHgB;AAStBC,IAAAA,KAAK,EAAE,IAAId,aAAJ,GAAoBe,OAApB,CAA4BP,YAAY,IAAI,EAA5C,CATe;AAUtBQ,IAAAA,WAAW,EAAE;AAAEC,MAAAA,QAAQ,EAAE,EAAZ;AAAgBC,MAAAA,SAAS,EAAE;AAA3B;AAVS,GAAjB,CAAP;AAYD;;AAED,eAAe,SAASC,UAAT,CAAoBX,YAApB,EAAkC;AAC/C;AACA;AACA,MAAI,CAACJ,OAAO,CAACC,OAAb,EAAsB;AACpB,WAAOE,MAAM,CAACC,YAAD,CAAb;AACD,GAL8C,CAO/C;;;AACA,MAAI,CAACL,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGI,MAAM,CAACC,YAAD,CAArB;AACD;;AAED,SAAOL,YAAP;AACD","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from \"apollo-boost\";\nimport fetch from \"isomorphic-unfetch\";\n\nlet apolloClient = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!process.browser) {\n  global.fetch = fetch;\n}\n\nfunction create(initialState) {\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: \"https://biggest-ecommerce.myshopify.com/api/graphql\", // Server URL (must be absolute)\n      headers: {\n        \"X-Shopify-Storefront-Access-Token\": \"7a415603317462ae8c7e4f98be2c5b5e\"\n      }\n    }),\n    cache: new InMemoryCache().restore(initialState || {}),\n    clientState: { defaults: {}, resolvers: {} }\n  });\n}\n\nexport default function initApollo(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}\n"]},"metadata":{},"sourceType":"module"}