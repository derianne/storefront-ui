{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/andrzej/Projects/storefront-ui/demo/lib/with-apollo-client.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport initApollo from \"./init-apollo\";\nimport Head from \"next/head\";\nimport { getMarkupFromTree } from \"@apollo/react-ssr\";\nexport default (App => {\n  return class Apollo extends React.Component {\n    static async getInitialProps(ctx) {\n      const {\n        Component,\n        router\n      } = ctx;\n      const apollo = initApollo();\n      let appProps = {};\n\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx, apollo);\n      }\n\n      const url = {\n        pathname: ctx.pathname,\n        query: ctx.query\n      }; // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getMarkupFromTree(__jsx(App, _extends({}, appProps, {\n            Component: Component,\n            router: router,\n            apolloClient: apollo,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29\n            },\n            __self: this\n          })));\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error(\"Error while running `getMarkupFromTree`\", error);\n        } // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n\n\n        Head.rewind();\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apollo.cache.extract();\n      return _objectSpread({}, appProps, {\n        apolloState,\n        url\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return __jsx(App, _extends({}, this.props, {\n        apolloClient: this.apolloClient,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }));\n    }\n\n  };\n});","map":{"version":3,"sources":["/Users/andrzej/Projects/storefront-ui/demo/lib/with-apollo-client.js"],"names":["React","initApollo","Head","getMarkupFromTree","App","Apollo","Component","getInitialProps","ctx","router","apollo","appProps","url","pathname","query","process","browser","error","console","rewind","apolloState","cache","extract","constructor","props","apolloClient","render"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AAEA,gBAAeC,GAAG,IAAI;AACpB,SAAO,MAAMC,MAAN,SAAqBL,KAAK,CAACM,SAA3B,CAAqC;AAC1C,iBAAaC,eAAb,CAA6BC,GAA7B,EAAkC;AAChC,YAAM;AAAEF,QAAAA,SAAF;AAAaG,QAAAA;AAAb,UAAwBD,GAA9B;AAEA,YAAME,MAAM,GAAGT,UAAU,EAAzB;AAEA,UAAIU,QAAQ,GAAG,EAAf;;AACA,UAAIP,GAAG,CAACG,eAAR,EAAyB;AACvBI,QAAAA,QAAQ,GAAG,MAAMP,GAAG,CAACG,eAAJ,CAAoBC,GAApB,EAAyBE,MAAzB,CAAjB;AACD;;AAED,YAAME,GAAG,GAAG;AACVC,QAAAA,QAAQ,EAAEL,GAAG,CAACK,QADJ;AAEVC,QAAAA,KAAK,EAAEN,GAAG,CAACM;AAFD,OAAZ,CAVgC,CAehC;AACA;;AACA,UAAI,CAACC,OAAO,CAACC,OAAb,EAAsB;AACpB,YAAI;AACF;AACA,gBAAMb,iBAAiB,CACrB,MAAC,GAAD,eACMQ,QADN;AAEE,YAAA,SAAS,EAAEL,SAFb;AAGE,YAAA,MAAM,EAAEG,MAHV;AAIE,YAAA,YAAY,EAAEC,MAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADqB,CAAvB;AAQD,SAVD,CAUE,OAAOO,KAAP,EAAc;AACd;AACA;AACA;AACAC,UAAAA,OAAO,CAACD,KAAR,CAAc,yCAAd,EAAyDA,KAAzD;AACD,SAhBmB,CAkBpB;AACA;;;AACAf,QAAAA,IAAI,CAACiB,MAAL;AACD,OAtC+B,CAwChC;;;AACA,YAAMC,WAAW,GAAGV,MAAM,CAACW,KAAP,CAAaC,OAAb,EAApB;AAEA,+BACKX,QADL;AAEES,QAAAA,WAFF;AAGER,QAAAA;AAHF;AAKD;;AAEDW,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;AACA,WAAKC,YAAL,GAAoBxB,UAAU,CAACuB,KAAK,CAACJ,WAAP,CAA9B;AACD;;AAEDM,IAAAA,MAAM,GAAG;AACP,aAAO,MAAC,GAAD,eAAS,KAAKF,KAAd;AAAqB,QAAA,YAAY,EAAE,KAAKC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AA1DyC,GAA5C;AA4DD,CA7DD","sourcesContent":["import React from \"react\";\nimport initApollo from \"./init-apollo\";\nimport Head from \"next/head\";\nimport { getMarkupFromTree } from \"@apollo/react-ssr\";\n\nexport default App => {\n  return class Apollo extends React.Component {\n    static async getInitialProps(ctx) {\n      const { Component, router } = ctx;\n\n      const apollo = initApollo();\n\n      let appProps = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx, apollo);\n      }\n\n      const url = {\n        pathname: ctx.pathname,\n        query: ctx.query\n      };\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getMarkupFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error(\"Error while running `getMarkupFromTree`\", error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState,\n        url\n      };\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}