{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  query Checkout($id: ID!) {\\n    node(id: $id) {\\n      ...CheckoutFragment\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  query Product($id: ID!) {\\n    node(id: $id) {\\n      ...product\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n        query query {\\n          productTypes(first: 20) {\\n            edges {\\n              node\\n            }\\n          }\\n          productTags(first: 20) {\\n            edges {\\n              node\\n            }\\n          }\\n        shop {\\n            name\\n            description\\n            products(first: 20, \", \") {\\n                pageInfo {\\n                    hasNextPage\\n                    hasPreviousPage\\n                }\\n                edges {\\n                    node {\\n                        ...product\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    \\n        \", \"\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  fragment product on Product {\\n    id\\n    title\\n    options {\\n      id\\n      name\\n      values\\n    }\\n    images(first: 250) {\\n      edges {\\n        node {\\n          id\\n          src\\n          altText\\n        }\\n      }\\n    }\\n\\n    variants(first: 250) {\\n      pageInfo {\\n        hasNextPage\\n        hasPreviousPage\\n      }\\n      edges {\\n        node {\\n          id\\n          title\\n          selectedOptions {\\n            name\\n            value\\n          }\\n          image {\\n            src\\n            altText\\n          }\\n          price\\n          priceV2 {\\n            currencyCode\\n            amount\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\nimport { CheckoutFragment } from \"./mutations\";\nexport var productFragmentQuery = gql(_templateObject());\n\nvar getSort = function getSort(filters) {\n  switch (filters.sort[0].id) {\n    case \"newest\":\n      return \"sortKey: CREATED_AT, reverse: true\";\n\n    case \"price-asc\":\n      return \"sortKey: PRICE\";\n\n    case \"price-desc\":\n      return \"sortKey: PRICE, reverse: true\";\n\n    case \"most-popular\":\n      return \"sortKey: BEST_SELLING, reverse: true\";\n  }\n};\n\nvar getFilterQuery = function getFilterQuery(filters) {\n  return _Object$keys(filters).map(function (filterName) {\n    if (!filters[filterName].length) return;\n\n    switch (filterName) {\n      case \"productTags\":\n        return \"tag:\".concat(filters[filterName].map(function (tag) {\n          return tag.id;\n        }).join(\" OR \"));\n\n      case \"productType\":\n        return \"product_type:\".concat(filters[filterName].map(function (tag) {\n          return tag.id;\n        }).join(\" OR \"));\n\n      case \"price\":\n        return \"variants.price:\".concat(filters[filterName].from ? filters[filterName].to ? \">\" + filters[filterName].from + \" AND variants.price:<\" + filters[filterName].to : \">\" + filters[filterName].from : \"<\" + filters[filterName].to);\n    }\n  });\n};\n\nexport var getProductsQuery = function getProductsQuery() {\n  var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var filterQuery = \"query:\\\"\".concat(getFilterQuery(filters), \"\\\"\");\n\n  if (filters.sort && filters.sort.length) {\n    filterQuery += \", \".concat(getSort(filters));\n  }\n\n  return gql(_templateObject2(), filterQuery, productFragmentQuery);\n};\nexport var getProductQuery = gql(_templateObject3(), productFragmentQuery);\nexport var getCheckoutQuery = gql(_templateObject4(), CheckoutFragment);","map":{"version":3,"sources":["/Users/andrzej/Projects/storefront-ui/demo/graphql/queries.js"],"names":["gql","CheckoutFragment","productFragmentQuery","getSort","filters","sort","id","getFilterQuery","map","filterName","length","tag","join","from","to","getProductsQuery","filterQuery","getProductQuery","getCheckoutQuery"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAEA,OAAO,IAAMC,oBAAoB,GAAGF,GAAH,mBAA1B;;AA+CP,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAAAC,OAAO,EAAI;AACzB,UAAQA,OAAO,CAACC,IAAR,CAAa,CAAb,EAAgBC,EAAxB;AACE,SAAK,QAAL;AACE,aAAO,oCAAP;;AACF,SAAK,WAAL;AACE,aAAO,gBAAP;;AACF,SAAK,YAAL;AACE,aAAO,+BAAP;;AACF,SAAK,cAAL;AACE,aAAO,sCAAP;AARJ;AAUD,CAXD;;AAaA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAH,OAAO;AAAA,SAC5B,aAAYA,OAAZ,EAAqBI,GAArB,CAAyB,UAAAC,UAAU,EAAI;AACrC,QAAI,CAACL,OAAO,CAACK,UAAD,CAAP,CAAoBC,MAAzB,EAAiC;;AAEjC,YAAQD,UAAR;AACE,WAAK,aAAL;AACE,6BAAcL,OAAO,CAACK,UAAD,CAAP,CAAoBD,GAApB,CAAwB,UAAAG,GAAG;AAAA,iBAAIA,GAAG,CAACL,EAAR;AAAA,SAA3B,EAAuCM,IAAvC,CAA4C,MAA5C,CAAd;;AACF,WAAK,aAAL;AACE,sCAAuBR,OAAO,CAACK,UAAD,CAAP,CACpBD,GADoB,CAChB,UAAAG,GAAG;AAAA,iBAAIA,GAAG,CAACL,EAAR;AAAA,SADa,EAEpBM,IAFoB,CAEf,MAFe,CAAvB;;AAGF,WAAK,OAAL;AACE,wCACER,OAAO,CAACK,UAAD,CAAP,CAAoBI,IAApB,GACIT,OAAO,CAACK,UAAD,CAAP,CAAoBK,EAApB,GACE,MACAV,OAAO,CAACK,UAAD,CAAP,CAAoBI,IADpB,GAEA,uBAFA,GAGAT,OAAO,CAACK,UAAD,CAAP,CAAoBK,EAJtB,GAKE,MAAMV,OAAO,CAACK,UAAD,CAAP,CAAoBI,IANhC,GAOI,MAAMT,OAAO,CAACK,UAAD,CAAP,CAAoBK,EARhC;AARJ;AAmBD,GAtBD,CAD4B;AAAA,CAA9B;;AAyBA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAkB;AAAA,MAAjBX,OAAiB,uEAAP,EAAO;AAChD,MAAIY,WAAW,qBAAaT,cAAc,CAACH,OAAD,CAA3B,OAAf;;AAEA,MAAIA,OAAO,CAACC,IAAR,IAAgBD,OAAO,CAACC,IAAR,CAAaK,MAAjC,EAAyC;AACvCM,IAAAA,WAAW,gBAASb,OAAO,CAACC,OAAD,CAAhB,CAAX;AACD;;AAED,SAAOJ,GAAP,qBAegCgB,WAfhC,EA6BQd,oBA7BR;AA+BD,CAtCM;AAwCP,OAAO,IAAMe,eAAe,GAAGjB,GAAH,qBAMxBE,oBANwB,CAArB;AASP,OAAO,IAAMgB,gBAAgB,GAAGlB,GAAH,qBAMzBC,gBANyB,CAAtB","sourcesContent":["import gql from \"graphql-tag\";\nimport { CheckoutFragment } from \"./mutations\";\n\nexport const productFragmentQuery = gql`\n  fragment product on Product {\n    id\n    title\n    options {\n      id\n      name\n      values\n    }\n    images(first: 250) {\n      edges {\n        node {\n          id\n          src\n          altText\n        }\n      }\n    }\n\n    variants(first: 250) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          title\n          selectedOptions {\n            name\n            value\n          }\n          image {\n            src\n            altText\n          }\n          price\n          priceV2 {\n            currencyCode\n            amount\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst getSort = filters => {\n  switch (filters.sort[0].id) {\n    case \"newest\":\n      return \"sortKey: CREATED_AT, reverse: true\";\n    case \"price-asc\":\n      return \"sortKey: PRICE\";\n    case \"price-desc\":\n      return \"sortKey: PRICE, reverse: true\";\n    case \"most-popular\":\n      return \"sortKey: BEST_SELLING, reverse: true\";\n  }\n};\n\nconst getFilterQuery = filters =>\n  Object.keys(filters).map(filterName => {\n    if (!filters[filterName].length) return;\n\n    switch (filterName) {\n      case \"productTags\":\n        return `tag:${filters[filterName].map(tag => tag.id).join(\" OR \")}`;\n      case \"productType\":\n        return `product_type:${filters[filterName]\n          .map(tag => tag.id)\n          .join(\" OR \")}`;\n      case \"price\":\n        return `variants.price:${\n          filters[filterName].from\n            ? filters[filterName].to\n              ? \">\" +\n                filters[filterName].from +\n                \" AND variants.price:<\" +\n                filters[filterName].to\n              : \">\" + filters[filterName].from\n            : \"<\" + filters[filterName].to\n        }`;\n    }\n  });\n\nexport const getProductsQuery = (filters = []) => {\n  let filterQuery = `query:\"${getFilterQuery(filters)}\"`;\n\n  if (filters.sort && filters.sort.length) {\n    filterQuery += `, ${getSort(filters)}`;\n  }\n\n  return gql`\n        query query {\n          productTypes(first: 20) {\n            edges {\n              node\n            }\n          }\n          productTags(first: 20) {\n            edges {\n              node\n            }\n          }\n        shop {\n            name\n            description\n            products(first: 20, ${filterQuery}) {\n                pageInfo {\n                    hasNextPage\n                    hasPreviousPage\n                }\n                edges {\n                    node {\n                        ...product\n                    }\n                }\n            }\n        }\n    }\n    \n        ${productFragmentQuery}\n    `;\n};\n\nexport const getProductQuery = gql`\n  query Product($id: ID!) {\n    node(id: $id) {\n      ...product\n    }\n  }\n  ${productFragmentQuery}\n`;\n\nexport const getCheckoutQuery = gql`\n  query Checkout($id: ID!) {\n    node(id: $id) {\n      ...CheckoutFragment\n    }\n  }\n  ${CheckoutFragment}\n`;\n"]},"metadata":{},"sourceType":"module"}