{"ast":null,"code":"import { useQuery } from \"@apollo/react-hooks\";\nimport getCollections from \"../queries/getCollections\";\nimport mapCollection from \"../../helpers/mapCollection\";\n\nvar useGetCollections = function useGetCollections() {\n  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n\n  var _useQuery = useQuery(getCollections, {\n    variables: {\n      amount: amount\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading;\n\n  if (!data) {\n    return [[], loading];\n  }\n\n  var _data$collections = data.collections,\n      collections = _data$collections === void 0 ? {\n    edges: []\n  } : _data$collections;\n  return [collections.edges.map(function (el) {\n    return mapCollection(el.node);\n  }), loading];\n};\n\nexport default useGetCollections;","map":{"version":3,"sources":["/Users/andrzej/Projects/storefront-ui/demo/graphql/hooks/useGetCollections.js"],"names":["useQuery","getCollections","mapCollection","useGetCollections","amount","variables","data","loading","collections","edges","map","el","node"],"mappings":"AAAA,SAASA,QAAT,QAAyB,qBAAzB;AACA,OAAOC,cAAP,MAA2B,2BAA3B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAiB;AAAA,MAAhBC,MAAgB,uEAAP,EAAO;;AAAA,kBACfJ,QAAQ,CAACC,cAAD,EAAiB;AAAEI,IAAAA,SAAS,EAAE;AAAED,MAAAA,MAAM,EAANA;AAAF;AAAb,GAAjB,CADO;AAAA,MACjCE,IADiC,aACjCA,IADiC;AAAA,MAC3BC,OAD2B,aAC3BA,OAD2B;;AAGzC,MAAI,CAACD,IAAL,EAAW;AACT,WAAO,CAAC,EAAD,EAAKC,OAAL,CAAP;AACD;;AALwC,0BAODD,IAPC,CAOjCE,WAPiC;AAAA,MAOjCA,WAPiC,kCAOnB;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAPmB;AASzC,SAAO,CAACD,WAAW,CAACC,KAAZ,CAAkBC,GAAlB,CAAsB,UAAAC,EAAE;AAAA,WAAIT,aAAa,CAACS,EAAE,CAACC,IAAJ,CAAjB;AAAA,GAAxB,CAAD,EAAsDL,OAAtD,CAAP;AACD,CAVD;;AAYA,eAAeJ,iBAAf","sourcesContent":["import { useQuery } from \"@apollo/react-hooks\";\nimport getCollections from \"../queries/getCollections\";\nimport mapCollection from \"../../helpers/mapCollection\";\n\nconst useGetCollections = (amount = 30) => {\n  const { data, loading } = useQuery(getCollections, { variables: { amount } });\n\n  if (!data) {\n    return [[], loading];\n  }\n\n  const { collections = { edges: [] } } = data;\n\n  return [collections.edges.map(el => mapCollection(el.node)), loading];\n};\n\nexport default useGetCollections;\n"]},"metadata":{},"sourceType":"module"}