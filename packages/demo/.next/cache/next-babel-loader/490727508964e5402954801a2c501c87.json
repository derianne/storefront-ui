{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/andrzej/Projects/storefront-ui/demo/lib/with-apollo-client.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport initApollo from \"./init-apollo\";\nimport Head from \"next/head\";\nimport { getMarkupFromTree } from \"@apollo/react-ssr\";\nexport default (function (App) {\n  return (\n    /*#__PURE__*/\n    function (_React$Component) {\n      _inherits(Apollo, _React$Component);\n\n      _createClass(Apollo, null, [{\n        key: \"getInitialProps\",\n        value: function () {\n          var _getInitialProps = _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee(ctx) {\n            var Component, router, apollo, appProps, url, apolloState;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    Component = ctx.Component, router = ctx.router;\n                    apollo = initApollo();\n                    appProps = {};\n\n                    if (!App.getInitialProps) {\n                      _context.next = 7;\n                      break;\n                    }\n\n                    _context.next = 6;\n                    return App.getInitialProps(ctx, apollo);\n\n                  case 6:\n                    appProps = _context.sent;\n\n                  case 7:\n                    url = {\n                      pathname: ctx.pathname,\n                      query: ctx.query\n                    }; // Run all GraphQL queries in the component tree\n                    // and extract the resulting data\n\n                    if (process.browser) {\n                      _context.next = 18;\n                      break;\n                    }\n\n                    _context.prev = 9;\n                    _context.next = 12;\n                    return getMarkupFromTree(__jsx(App, _extends({}, appProps, {\n                      Component: Component,\n                      router: router,\n                      apolloClient: apollo,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 29\n                      },\n                      __self: this\n                    })));\n\n                  case 12:\n                    _context.next = 17;\n                    break;\n\n                  case 14:\n                    _context.prev = 14;\n                    _context.t0 = _context[\"catch\"](9);\n                    // Prevent Apollo Client GraphQL errors from crashing SSR.\n                    // Handle them in components via the data.error prop:\n                    // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                    console.error(\"Error while running `getMarkupFromTree`\", _context.t0);\n\n                  case 17:\n                    // getDataFromTree does not call componentWillUnmount\n                    // head side effect therefore need to be cleared manually\n                    Head.rewind();\n\n                  case 18:\n                    // Extract query data from the Apollo store\n                    apolloState = apollo.cache.extract();\n                    return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                      apolloState: apolloState,\n                      url: url\n                    }));\n\n                  case 20:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, this, [[9, 14]]);\n          }));\n\n          function getInitialProps(_x) {\n            return _getInitialProps.apply(this, arguments);\n          }\n\n          return getInitialProps;\n        }()\n      }]);\n\n      function Apollo(props) {\n        var _this;\n\n        _classCallCheck(this, Apollo);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(Apollo).call(this, props));\n        _this.apolloClient = initApollo(props.apolloState);\n        return _this;\n      }\n\n      _createClass(Apollo, [{\n        key: \"render\",\n        value: function render() {\n          return __jsx(App, _extends({}, this.props, {\n            apolloClient: this.apolloClient,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          }));\n        }\n      }]);\n\n      return Apollo;\n    }(React.Component)\n  );\n});","map":{"version":3,"sources":["/Users/andrzej/Projects/storefront-ui/demo/lib/with-apollo-client.js"],"names":["React","initApollo","Head","getMarkupFromTree","App","ctx","Component","router","apollo","appProps","getInitialProps","url","pathname","query","process","browser","console","error","rewind","apolloState","cache","extract","props","apolloClient"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AAEA,gBAAe,UAAAC,GAAG,EAAI;AACpB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAC+BC,GAD/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAEYC,oBAAAA,SAFZ,GAEkCD,GAFlC,CAEYC,SAFZ,EAEuBC,MAFvB,GAEkCF,GAFlC,CAEuBE,MAFvB;AAIUC,oBAAAA,MAJV,GAImBP,UAAU,EAJ7B;AAMQQ,oBAAAA,QANR,GAMmB,EANnB;;AAAA,yBAOQL,GAAG,CAACM,eAPZ;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAQuBN,GAAG,CAACM,eAAJ,CAAoBL,GAApB,EAAyBG,MAAzB,CARvB;;AAAA;AAQMC,oBAAAA,QARN;;AAAA;AAWUE,oBAAAA,GAXV,GAWgB;AACVC,sBAAAA,QAAQ,EAAEP,GAAG,CAACO,QADJ;AAEVC,sBAAAA,KAAK,EAAER,GAAG,CAACQ;AAFD,qBAXhB,EAgBI;AACA;;AAjBJ,wBAkBSC,OAAO,CAACC,OAlBjB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,2BAqBcZ,iBAAiB,CACrB,MAAC,GAAD,eACMM,QADN;AAEE,sBAAA,SAAS,EAAEH,SAFb;AAGE,sBAAA,MAAM,EAAEC,MAHV;AAIE,sBAAA,YAAY,EAAEC,MAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADqB,CArB/B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8BQ;AACA;AACA;AACAQ,oBAAAA,OAAO,CAACC,KAAR,CAAc,yCAAd;;AAjCR;AAoCM;AACA;AACAf,oBAAAA,IAAI,CAACgB,MAAL;;AAtCN;AAyCI;AACMC,oBAAAA,WA1CV,GA0CwBX,MAAM,CAACY,KAAP,CAAaC,OAAb,EA1CxB;AAAA,uEA6CSZ,QA7CT;AA8CMU,sBAAAA,WAAW,EAAXA,WA9CN;AA+CMR,sBAAAA,GAAG,EAAHA;AA/CN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAmDE,sBAAYW,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AACA,cAAKC,YAAL,GAAoBtB,UAAU,CAACqB,KAAK,CAACH,WAAP,CAA9B;AAFiB;AAGlB;;AAtDH;AAAA;AAAA,iCAwDW;AACP,iBAAO,MAAC,GAAD,eAAS,KAAKG,KAAd;AAAqB,YAAA,YAAY,EAAE,KAAKC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACD;AA1DH;;AAAA;AAAA,MAA4BvB,KAAK,CAACM,SAAlC;AAAA;AA4DD,CA7DD","sourcesContent":["import React from \"react\";\nimport initApollo from \"./init-apollo\";\nimport Head from \"next/head\";\nimport { getMarkupFromTree } from \"@apollo/react-ssr\";\n\nexport default App => {\n  return class Apollo extends React.Component {\n    static async getInitialProps(ctx) {\n      const { Component, router } = ctx;\n\n      const apollo = initApollo();\n\n      let appProps = {};\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx, apollo);\n      }\n\n      const url = {\n        pathname: ctx.pathname,\n        query: ctx.query\n      };\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      if (!process.browser) {\n        try {\n          // Run all GraphQL queries\n          await getMarkupFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          );\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error(\"Error while running `getMarkupFromTree`\", error);\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind();\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract();\n\n      return {\n        ...appProps,\n        apolloState,\n        url\n      };\n    }\n\n    constructor(props) {\n      super(props);\n      this.apolloClient = initApollo(props.apolloState);\n    }\n\n    render() {\n      return <App {...this.props} apolloClient={this.apolloClient} />;\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}