{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport gql from \"graphql-tag\";\nimport { CheckoutFragment } from \"./mutations\";\nexport const productFragmentQuery = gql`\n  fragment product on Product {\n    id\n    title\n    options {\n      id\n      name\n      values\n    }\n    images(first: 250) {\n      edges {\n        node {\n          id\n          src\n          altText\n        }\n      }\n    }\n\n    variants(first: 250) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          title\n          selectedOptions {\n            name\n            value\n          }\n          image {\n            src\n            altText\n          }\n          price\n          priceV2 {\n            currencyCode\n            amount\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst getSort = filters => {\n  switch (filters.sort[0].id) {\n    case \"newest\":\n      return \"sortKey: CREATED_AT, reverse: true\";\n\n    case \"price-asc\":\n      return \"sortKey: PRICE\";\n\n    case \"price-desc\":\n      return \"sortKey: PRICE, reverse: true\";\n\n    case \"most-popular\":\n      return \"sortKey: BEST_SELLING, reverse: true\";\n  }\n};\n\nconst getFilterQuery = filters => _Object$keys(filters).map(filterName => {\n  if (!filters[filterName].length) return;\n\n  switch (filterName) {\n    case \"productTags\":\n      return `tag:${filters[filterName].map(tag => tag.id).join(\" OR \")}`;\n\n    case \"productType\":\n      return `product_type:${filters[filterName].map(tag => tag.id).join(\" OR \")}`;\n\n    case \"price\":\n      return `variants.price:${filters[filterName].from ? filters[filterName].to ? \">\" + filters[filterName].from + \" AND variants.price:<\" + filters[filterName].to : \">\" + filters[filterName].from : \"<\" + filters[filterName].to}`;\n  }\n});\n\nexport const getProductsQuery = (filters = []) => {\n  let filterQuery = `query:\"${getFilterQuery(filters)}\"`;\n\n  if (filters.sort && filters.sort.length) {\n    filterQuery += `, ${getSort(filters)}`;\n  }\n\n  return gql`\n        query query {\n          productTypes(first: 20) {\n            edges {\n              node\n            }\n          }\n          productTags(first: 20) {\n            edges {\n              node\n            }\n          }\n        shop {\n            name\n            description\n            products(first: 20, ${filterQuery}) {\n                pageInfo {\n                    hasNextPage\n                    hasPreviousPage\n                }\n                edges {\n                    node {\n                        ...product\n                    }\n                }\n            }\n        }\n    }\n    \n        ${productFragmentQuery}\n    `;\n};\nexport const getProductQuery = gql`\n  query Product($id: ID!) {\n    node(id: $id) {\n      ...product\n    }\n  }\n  ${productFragmentQuery}\n`;\nexport const getCheckoutQuery = gql`\n  query Checkout($id: ID!) {\n    node(id: $id) {\n      ...CheckoutFragment\n    }\n  }\n  ${CheckoutFragment}\n`;","map":{"version":3,"sources":["/Users/andrzej/Projects/storefront-ui/demo/graphql/queries.js"],"names":["gql","CheckoutFragment","productFragmentQuery","getSort","filters","sort","id","getFilterQuery","map","filterName","length","tag","join","from","to","getProductsQuery","filterQuery","getProductQuery","getCheckoutQuery"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAEA,OAAO,MAAMC,oBAAoB,GAAGF,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAjC;;AA+CP,MAAMG,OAAO,GAAGC,OAAO,IAAI;AACzB,UAAQA,OAAO,CAACC,IAAR,CAAa,CAAb,EAAgBC,EAAxB;AACE,SAAK,QAAL;AACE,aAAO,oCAAP;;AACF,SAAK,WAAL;AACE,aAAO,gBAAP;;AACF,SAAK,YAAL;AACE,aAAO,+BAAP;;AACF,SAAK,cAAL;AACE,aAAO,sCAAP;AARJ;AAUD,CAXD;;AAaA,MAAMC,cAAc,GAAGH,OAAO,IAC5B,aAAYA,OAAZ,EAAqBI,GAArB,CAAyBC,UAAU,IAAI;AACrC,MAAI,CAACL,OAAO,CAACK,UAAD,CAAP,CAAoBC,MAAzB,EAAiC;;AAEjC,UAAQD,UAAR;AACE,SAAK,aAAL;AACE,aAAQ,OAAML,OAAO,CAACK,UAAD,CAAP,CAAoBD,GAApB,CAAwBG,GAAG,IAAIA,GAAG,CAACL,EAAnC,EAAuCM,IAAvC,CAA4C,MAA5C,CAAoD,EAAlE;;AACF,SAAK,aAAL;AACE,aAAQ,gBAAeR,OAAO,CAACK,UAAD,CAAP,CACpBD,GADoB,CAChBG,GAAG,IAAIA,GAAG,CAACL,EADK,EAEpBM,IAFoB,CAEf,MAFe,CAEP,EAFhB;;AAGF,SAAK,OAAL;AACE,aAAQ,kBACNR,OAAO,CAACK,UAAD,CAAP,CAAoBI,IAApB,GACIT,OAAO,CAACK,UAAD,CAAP,CAAoBK,EAApB,GACE,MACAV,OAAO,CAACK,UAAD,CAAP,CAAoBI,IADpB,GAEA,uBAFA,GAGAT,OAAO,CAACK,UAAD,CAAP,CAAoBK,EAJtB,GAKE,MAAMV,OAAO,CAACK,UAAD,CAAP,CAAoBI,IANhC,GAOI,MAAMT,OAAO,CAACK,UAAD,CAAP,CAAoBK,EAC/B,EATD;AARJ;AAmBD,CAtBD,CADF;;AAyBA,OAAO,MAAMC,gBAAgB,GAAG,CAACX,OAAO,GAAG,EAAX,KAAkB;AAChD,MAAIY,WAAW,GAAI,UAAST,cAAc,CAACH,OAAD,CAAU,GAApD;;AAEA,MAAIA,OAAO,CAACC,IAAR,IAAgBD,OAAO,CAACC,IAAR,CAAaK,MAAjC,EAAyC;AACvCM,IAAAA,WAAW,IAAK,KAAIb,OAAO,CAACC,OAAD,CAAU,EAArC;AACD;;AAED,SAAOJ,GAAI;;;;;;;;;;;;;;;kCAeqBgB,WAAY;;;;;;;;;;;;;;UAcpCd,oBAAqB;KA7B7B;AA+BD,CAtCM;AAwCP,OAAO,MAAMe,eAAe,GAAGjB,GAAI;;;;;;IAM/BE,oBAAqB;CANlB;AASP,OAAO,MAAMgB,gBAAgB,GAAGlB,GAAI;;;;;;IAMhCC,gBAAiB;CANd","sourcesContent":["import gql from \"graphql-tag\";\nimport { CheckoutFragment } from \"./mutations\";\n\nexport const productFragmentQuery = gql`\n  fragment product on Product {\n    id\n    title\n    options {\n      id\n      name\n      values\n    }\n    images(first: 250) {\n      edges {\n        node {\n          id\n          src\n          altText\n        }\n      }\n    }\n\n    variants(first: 250) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          title\n          selectedOptions {\n            name\n            value\n          }\n          image {\n            src\n            altText\n          }\n          price\n          priceV2 {\n            currencyCode\n            amount\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst getSort = filters => {\n  switch (filters.sort[0].id) {\n    case \"newest\":\n      return \"sortKey: CREATED_AT, reverse: true\";\n    case \"price-asc\":\n      return \"sortKey: PRICE\";\n    case \"price-desc\":\n      return \"sortKey: PRICE, reverse: true\";\n    case \"most-popular\":\n      return \"sortKey: BEST_SELLING, reverse: true\";\n  }\n};\n\nconst getFilterQuery = filters =>\n  Object.keys(filters).map(filterName => {\n    if (!filters[filterName].length) return;\n\n    switch (filterName) {\n      case \"productTags\":\n        return `tag:${filters[filterName].map(tag => tag.id).join(\" OR \")}`;\n      case \"productType\":\n        return `product_type:${filters[filterName]\n          .map(tag => tag.id)\n          .join(\" OR \")}`;\n      case \"price\":\n        return `variants.price:${\n          filters[filterName].from\n            ? filters[filterName].to\n              ? \">\" +\n                filters[filterName].from +\n                \" AND variants.price:<\" +\n                filters[filterName].to\n              : \">\" + filters[filterName].from\n            : \"<\" + filters[filterName].to\n        }`;\n    }\n  });\n\nexport const getProductsQuery = (filters = []) => {\n  let filterQuery = `query:\"${getFilterQuery(filters)}\"`;\n\n  if (filters.sort && filters.sort.length) {\n    filterQuery += `, ${getSort(filters)}`;\n  }\n\n  return gql`\n        query query {\n          productTypes(first: 20) {\n            edges {\n              node\n            }\n          }\n          productTags(first: 20) {\n            edges {\n              node\n            }\n          }\n        shop {\n            name\n            description\n            products(first: 20, ${filterQuery}) {\n                pageInfo {\n                    hasNextPage\n                    hasPreviousPage\n                }\n                edges {\n                    node {\n                        ...product\n                    }\n                }\n            }\n        }\n    }\n    \n        ${productFragmentQuery}\n    `;\n};\n\nexport const getProductQuery = gql`\n  query Product($id: ID!) {\n    node(id: $id) {\n      ...product\n    }\n  }\n  ${productFragmentQuery}\n`;\n\nexport const getCheckoutQuery = gql`\n  query Checkout($id: ID!) {\n    node(id: $id) {\n      ...CheckoutFragment\n    }\n  }\n  ${CheckoutFragment}\n`;\n"]},"metadata":{},"sourceType":"module"}